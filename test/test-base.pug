extends base

block style
	link(rel='stylesheet', href='/fonts/iconmonstr/iconmonstr-iconic-font.css')
	style
		:sass
			pre.console
				font-family: monospace
				line-height: 1.3em
				tab-size: 4

				div + div
					--margin: 8px
					margin-top: var(--margin)
					padding-top: var(--margin)
					border-top: 1px solid #eee

				.comment
					color: #999

				.title
					padding-bottom: 8px
					font-size: 2.5em

				.info span
					display: inline-block
					padding: 1px 2px 3px 2px
					background-color: #eee
					color: #139A71

				div + div.title
					margin-top: 128px
					border-top: none

				.log:before
					content: '> '

				.assert

					&:before
						position: relative
						display: inline-block
						font-family: 'iconmonstr-iconic-font'
						font-size: .9em
						padding-right: 8px
						transform: translateY(.25em)
					
					&.success
						color: #139A71
						
						&:before
							content: '\e0f1'

					&.fail
						color: #E7100C

						&:before
							content: '\e0f5'

block body

	pre.console

	script.

		function log(...args) {

			if (log.toConsole)
				console.log.apply(console, args)


			let div = document.createElement('div')
			div.classList.add('log')

			log.last = 
			div.innerHTML = args.map(v => String(v)).join(' ')

			document.querySelector('.console').appendChild(div)

		}

		log.toConsole = true



		log.getLog = function(index) {

			let children = document.querySelector('.console').querySelectorAll('.log')

			if (index < 0)
				index += children.length

			return children[index].innerHTML

		}

		log.getLogs = function(fromIndex, toIndex) {

			let children = [...document.querySelector('.console').querySelectorAll('.log')]

			return children.slice(fromIndex, toIndex).map(div => div.innerHTML)

		}





		function getLogDiv(type, msg) {

			let div = document.createElement('div')
			div.classList.add(type)
			div.innerHTML = `<span>${msg}</span>`

			document.querySelector('.console').appendChild(div)

		}

		log.comment = msg => getLogDiv('comment', msg)
		log.info = msg => getLogDiv('info', msg)
		log.title = msg => getLogDiv('title', msg)





		log.assert = function assert(msg, test) {

			let div = document.createElement('div')
			div.classList.add('assert')

			div.classList.add(test ? 'success' : 'fail')
			div.innerHTML = (test ? '' : 'fail: ') + msg

			document.querySelector('.console').appendChild(div)

		}






		async function testlineLoad(testlineURL) {

			let code = await load(testlineURL)

			let waitForImport = async () => {}

			code = code.replace(/\/\/ IMPORT([\s\S]*?)\/\//, (m, m1) => {

				let importCode = m1.trim()

				let script = document.createElement('script')
				script.setAttribute('type', 'module')
				script.innerHTML = importCode + `\n\nwindow.importDone = true`
				document.head.appendChild(script)

				waitForImport = async () => new Promise(resolve => {

					let id = setInterval(() => {

						if (!window.importDone)
							return

						clearInterval(id)
						resolve(true)

					}, 200)

				})

				return '//'

			})

			console.log(code)
			console.log(await waitForImport())

			let steps = code.split(/\/\/ TEST.*\n/).filter(v => /\S/.test(v))
			let titles = code.match(/\/\/ TEST.*\n/g).map(v => v.slice('// TEST - '.length))

			window.extract = []

			for (let [index, step] of steps.entries()) {

				log.title(titles[index])

				let a = step.split(/\/\/\slog.break\n/g)

				let b = []

				for (let v of a) {

					let index = window.extract.length
					window.extract.push(v.trim())
					let comment = `log.comment(window.extract[${index}])`
					b.push(comment)
					b.push(v)

				}

				eval(b.join('\n'))

			}

		}




